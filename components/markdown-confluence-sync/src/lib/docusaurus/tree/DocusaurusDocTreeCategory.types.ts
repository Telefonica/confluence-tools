import type { LoggerInterface } from "@mocks-server/logger";

import type { DocusaurusDocTreeItem } from "./DocusaurusDocTree.types.js";

export interface DocusaurusDocTreeCategoryOptions {
  /** Logger */
  logger?: LoggerInterface;
}

/** Creates DocusaurusDocTreeCategory interface */
export interface DocusaurusDocTreeCategoryConstructor {
  /**
   * Returns DocusaurusDocTreeCategory interface
   *
   * Creates a new DocusaurusDocTreeCategory instance from a path.
   * If it contains an index.md file, its title, syncToConfluence configuration and content
   * will be obtained from it. Otherwise, its title will be its path's basename and it will
   * enable the syncToConfluence config.
   *
   * In addition, the category information will be extended by metadata contained in
   * the _category_.[json|yaml] file, if existent.
   *
   * @param {string} path - Path to the category
   * @returns {DocusaurusDocTreeCategory} instance {@link DocusaurusDocTreeCategoryInterface}.
   * @throws {Error} If the path does not exist.
   * @throws {Error} If the path is not a directory.
   * @throws {Error} If the path does not contain an index.md file.
   * @example
   * // A category with an index.md file
   * // docs/
   * // ├── index.md
   *  const category = new DocusaurusDocTreeCategory("/docs");
   * // will create a category with the following properties:
   * // {
   * //   path: "/docs",
   * //   meta: {
   * //     title: "Docs",
   * //     syncToConfluence: true,
   * //   },
   * //   isCategory: true,
   * //   content: "...<index.md content>..."
   * // }
   *
   * @example
   * // A category without an index.md file
   * // docs/
   * const category = new DocusaurusDocTreeCategory("/docs");
   * // will create a category with the following properties:
   * // {
   * //   path: "/docs",
   * //   meta: {
   * //     title: "docs",
   * //     syncToConfluence: true,
   * //   },
   * //   isCategory: true,
   * //   content: ""
   * // }
   *
   * @see {@link https://docusaurus.io/docs/sidebar/autogenerated#category-item-metadata | Category Item Metadata}
   */
  new (
    path: string,
    options?: DocusaurusDocTreeCategoryOptions,
  ): DocusaurusDocTreeCategoryInterface;
}

/**
 * DocusaurusDocTreeCategory interface
 *
 * @extends DocusaurusDocTreeItem
 */
export type DocusaurusDocTreeCategoryInterface = DocusaurusDocTreeItem;

/** Docusaurus Tree Category meta */
export interface DocusaurusDocTreeCategoryMeta {
  /** Category title */
  readonly title?: string;
}
