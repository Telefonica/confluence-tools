// SPDX-FileCopyrightText: 2024 Telefónica Innovación Digital
// SPDX-License-Identifier: Apache-2.0

import type { Root, Properties } from "hast";
import type { Plugin as UnifiedPlugin } from "unified";

import { replace } from "../../../../support/unist/unist-util-replace.js";

/**
 * UnifiedPlugin to replace `<img>` HastElements with Confluence storage image macro.
 *
 * @see {@link https://developer.atlassian.com/server/confluence/confluence-storage-format/ | Confluence Storage Format }
 *
 * @example
 *  <img src="https://example.com/image.png" />
 *  // becomes
 *  <ac:image>
 *   <ri:url ri:value="https://example.com/image.png" />
 *  </ac:image>
 *
 * @example
 *  <img src="image.png" />
 *  // becomes
 *  <ac:image>
 *   <ri:attachment ri:filename="image.png" />
 *  </ac:image>
 */
const rehypeReplaceImgTags: UnifiedPlugin<[], Root> =
  function rehypeReplaceImgTags() {
    return function transformer(tree) {
      replace(tree, { type: "element", tagName: "img" }, (node) => {
        const src = node.properties?.src;
        if (typeof src !== "string" || src.toString().length === 0) {
          return node;
        }
        if (src.startsWith("http")) {
          // eslint-disable-next-line no-console
          console.log("Image source is a URL!", src);
          return {
            type: "element" as const,
            tagName: "ac:image",
            children: [
              {
                type: "element" as const,
                tagName: "ri:url",
                properties: {
                  "ri:value": src,
                },
                children: [],
              },
            ],
          };
        }
        const properties = obtainSvgProperties(src);
        return {
          type: "element" as const,
          tagName: "ac:image",
          properties,
          children: [
            {
              type: "element" as const,
              tagName: "ri:attachment",
              properties: {
                "ri:filename": src,
              },
              children: [],
            },
          ],
        };
      });
    };
  };

/**
 * Check if image is svg to adding width property
 * @param src Image source
 * @returns object with svg properties
 */
function obtainSvgProperties(src: string): Properties {
  const mermaidFilePattern = new RegExp("autogenerated.+.svg$", "g");
  return mermaidFilePattern.test(src)
    ? {
        "ac:width": "1000",
      }
    : {};
}

export default rehypeReplaceImgTags;
